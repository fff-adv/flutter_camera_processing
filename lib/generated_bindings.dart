// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings to opencv and zxing.
class GeneratedBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  GeneratedBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  GeneratedBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<ffi.Int8> opencvVersion() {
    return _opencvVersion();
  }

  late final _opencvVersionPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function()>>(
          'opencvVersion');
  late final _opencvVersion =
      _opencvVersionPtr.asFunction<ffi.Pointer<ffi.Int8> Function()>();

  ffi.Pointer<ffi.Int8> opencvProcessStream(
    ffi.Pointer<ffi.Int8> bytes,
    int width,
    int height,
    ffi.Pointer<ffi.Int8> outputImagePath,
  ) {
    return _opencvProcessStream(
      bytes,
      width,
      height,
      outputImagePath,
    );
  }

  late final _opencvProcessStreamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>, ffi.Int32,
              ffi.Int32, ffi.Pointer<ffi.Int8>)>>('opencvProcessStream');
  late final _opencvProcessStream = _opencvProcessStreamPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, int, int, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> zxingVersion() {
    return _zxingVersion();
  }

  late final _zxingVersionPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function()>>(
          'zxingVersion');
  late final _zxingVersion =
      _zxingVersionPtr.asFunction<ffi.Pointer<ffi.Int8> Function()>();

  ffi.Pointer<ffi.Int8> zxingProcessStream(
    ffi.Pointer<ffi.Int8> bytes,
    int width,
    int height,
    ffi.Pointer<ffi.Int8> outputImagePath,
  ) {
    return _zxingProcessStream(
      bytes,
      width,
      height,
      outputImagePath,
    );
  }

  late final _zxingProcessStreamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>, ffi.Int32,
              ffi.Int32, ffi.Pointer<ffi.Int8>)>>('zxingProcessStream');
  late final _zxingProcessStream = _zxingProcessStreamPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, int, int, ffi.Pointer<ffi.Int8>)>();
}
